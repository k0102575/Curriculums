/* 멀티 태스킹 : 스레드의 라이프 사이클 */

package step19;

public class Test07 {

  static class Food {
    synchronized public void eat() throws Exception {
      System.out.println("기다려 !");
      this.wait();
      System.out.println("냠냠 쩝쩝");
    }
    
    synchronized public void allow() throws Exception {
      this.notify();
    }
    
  } // Class Food

  static class Dog extends Thread {
    Food food;

    public Dog(Food food) {
      this.food = food;
    }

    public void run() {
        try {
          food.eat();
        } catch (Exception e) {
          e.printStackTrace();
        }
      System.out.println("멍멍!!");
    } // run()
  } // class Dog

  static class Counter extends Thread {
    Food food;
    int count = 10;
    
    public Counter(Food food) {
      this.food = food;
    }
    
    public void run() {
      while (true) {
        count--;
        System.out.printf("먹기 %d 초전\n", count);
        if (count == 0) {
          this.notifyAll();
        }
        try {
          Thread.sleep(1000);
        } catch (InterruptedException e) {}
      } //while

    } // run()

  } // class MyThread 쓰레드 상속

  public static void main(String[] args) {
    System.out.println("step19 Test06 실행중");
    System.out.println();

    Food food = new Food();
    Dog dog = new Dog(food);
    dog.start();

    Counter counter = new Counter(food);

    counter.start();

    
  }
}
