package bitcamp.java93.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import bitcamp.java93.domain.Teacher;
import bitcamp.java93.util.DBConnectionPool;

public class TeacherDao {
  DBConnectionPool conPool;

  public TeacherDao(DBConnectionPool conPool){
    this.conPool = conPool;
  } // 생성자

  public List<Teacher> selectList(int pageNo, int pageSize) throws Exception {
    Connection con = conPool.getConnection();
    // connection을 닫지 않기 위해 try문 안에 넣지 않는다.

    try (
        PreparedStatement stmt = con.prepareStatement(
            "select m.mno, m.name, m.tel, m.email, t.hmpg from tcher t inner join memb m on t.tno = m.mno order by m.name asc limit ?, ?");
        ) {
      stmt.setInt(1, (pageNo -1) * pageSize);
      stmt.setInt(2, pageSize);

      ArrayList<Teacher> list = new ArrayList<>();
      try(      ResultSet rs = stmt.executeQuery();) {
        Teacher teacher = null;

        while (rs.next()) {
          teacher = new Teacher();
          teacher.setNo(rs.getInt("mno"));
          teacher.setName(rs.getString("name"));
          teacher.setTel(rs.getString("tel"));
          teacher.setEmail(rs.getString("email"));
          teacher.setHomepage((rs.getString("hmpg"));

          list.add(teacher);
        } // while

      } // try
      return list;
    } finally {
      conPool.returnConnection(con);
    }

  } // selectList()

  public Teacher selectOne(int no) throws Exception {
    Connection con = conPool.getConnection();

    try (
        PreparedStatement stmt = con.prepareStatement(
            "select m.mno, m.name, m.tel, m.email, t.hmpg, t.fcbk, t.twit " +
                " from tcher t inner join memb m on t.tno=m.mno " +
                " where t.tno=?"
            );
        ) {
      stmt.setInt(1, no);

      try(ResultSet rs = stmt.executeQuery();) {
        if (!rs.next()) {
          return null;
        }

        Teacher teacher = new Teacher();
        teacher.setNo(rs.getInt("mno"));
        teacher.setName(rs.getString("name"));
        teacher.setTel(rs.getString("tel"));
        teacher.setEmail(rs.getString("email"));
        teacher.setHomepage("homg");
        teacher.setFacebook("fcbk");
        teacher.setTwitter("twit");

        return teacher;

      } // try

    } finally {
      conPool.returnConnection(con);
    }

  } // selectOne()

  public int insert(Teacher teacher) throws Exception {
    Connection con = conPool.getConnection();
    try(
        PreparedStatement stmt = con.prepareStatement(
            "insert into tcher(tno, hmpg, fcbk, twit) values(?, ?, ?, ?)");
        ) {
      stmt.setString(1, teacher.getName());
      stmt.setString(2, teacher.getHomepage());
      stmt.setString(3, teacher.getFacebook());
      stmt.setString(4, teacher.getTwitter());

      return stmt.executeUpdate();

    } finally {
      conPool.returnConnection(con);
    }

  } // insert()

  public int delete(int no) throws Exception {
    Connection con = conPool.getConnection();
    try(
        PreparedStatement stmt = con.prepareStatement("delete from tcher where tno=?");
        ) {
      stmt.setInt(1, no);
      return stmt.executeUpdate();

    } finally {
      conPool.returnConnection(con);
    }

  } // delete()

  public int update(Teacher teacher) throws Exception {
    Connection con = conPool.getConnection();
    try(
        PreparedStatement stmt = con.prepareStatement(
            "update stud set hmpg=?, fcbk=?, twit=? where tno=?");
        ) {
      stmt.setString(1, teacher.getHomepage());
      stmt.setString(2, teacher.getFacebook());
      stmt.setString(3, teacher.getTwitter());
      stmt.setInt(4, teacher.getNo());

      return stmt.executeUpdate();

    } finally {
      conPool.returnConnection(con);
    }

  } // insert()

  public Teacher selectOneByEmailPassword(String email, String password) throws Exception {
    Connection con = conPool.getConnection();

    try (
        PreparedStatement stmt = con.prepareStatement
        ("select m.mno, m.name, m.tel, m.email, t.hmpg, t.fcbk, t.twit " +
         " from tcher t inner join memb m on t.tno=m.mno ");
        ) {

      stmt.setString(1, email);
      stmt.setString(2, password);

      try(ResultSet rs = stmt.executeQuery();) {
        if (!rs.next()) {
          return null;
        }

        Teacher teacher = new Teacher();
        teacher.setNo(rs.getInt("mno"));
        teacher.setName(rs.getString("name"));
        teacher.setTel(rs.getString("tel"));
        teacher.setEmail(rs.getString("email"));
        teacher.setHomepage("homg");
        teacher.setFacebook("fcbk");
        teacher.setTwitter("twit");

        return teacher;

      } // try

    } finally {
      conPool.returnConnection(con);
    }

  } // selectOneByEmailPassword()

}
