package bitcamp.java93.listener;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.Collection;
import java.util.HashMap;
import java.util.Set;

import javax.servlet.ServletContext;
import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import javax.servlet.annotation.WebListener;

import static org.reflections.ReflectionUtils.*;


import org.reflections.Reflections;

import bitcamp.java93.annotation.Component;
import bitcamp.java93.util.DBConnectionPool;

@WebListener
public class ContextLoaderListener implements ServletContextListener{
  HashMap<String, Object> objMap = new HashMap<>();

  @Override
  public void contextInitialized(ServletContextEvent sce) {
    ServletContext sc = sce.getServletContext();

    String jdbcDriver = "com.mysql.jdbc.Driver";
    String jdbcUrl = "jdbc:mysql://localhost:3306/webappdb";
    String jdbcUsername = "webapp";
    String jdbcPassword = "1111";

    try {
      DBConnectionPool conPool = new DBConnectionPool(jdbcDriver, jdbcUrl, jdbcUsername, jdbcPassword);
      objMap.put("conPool", conPool);

      createObjects("bitcamp,java93");

    } catch (Exception e) {
      e.printStackTrace();
    } 

  }
  
  private void createObjects(String packageName) throws Exception {
    
    Reflections reflections = new Reflections(packageName);

    Set<Class<?>> components = 
        reflections.getTypesAnnotatedWith(Component.class);

    Component anno = null;

    for(Class<?> clazz : components) {
      anno = clazz.getAnnotation(Component.class);
      Object obj = clazz.newInstance();

      if(anno.value().equals("")) {
        objMap.put(clazz.getCanonicalName(), obj); // value값을 안준경우
      } else {
        objMap.put(anno.value(), obj); // value값을 준경우
      } // if
      
    } // for
    
  } // createObjects()
  
  
  private void injectDependencies() throws Exception {
    Collection<Object> objList = objMap.values();
    for (Object obj : objList) {
      Set<Method> setters = getAllMethods(obj.getClass(),
          withModifier(Modifier.PUBLIC), 
          withPrefix("set"), 
          withParametersCount(1));
      // 메소드를 알아내는법
      
      for (Method m : setters) {
        Class<?> paramType = m.getParameterTypes()[0];
        Object dependency = findDependency(paramType);
        if (dependency == null) {
          m.invoke(obj, dependency);
        }
      }
      
    }
    
  } // injectDependencies()
  
  private Object findDependency(Class<?> paramType) {
  }

  
  @Override
  public void contextDestroyed(ServletContextEvent sce) {
    
  }

}

//LectDao lectDao = new LectDao(conPool);
//ManagerDao managerDao = new ManagerDao(conPool);
//CroomDao croomDao = new CroomDao(conPool);

//MemberService memberService = new MemberService();
//memberService.setMemberDao(memberDao);

//CroomService croomService = new CroomService();
//croomService.setCroomDao(croomDao);

//ManagerService managerService = new ManagerService();
//managerService.setManagerDao(managerDao);

//LectService lectService = new LectService();
//lectService.setCroomDao(croomDao);
//lectService.setManagerDao(managerDao);
//lectService.setLectDao(lectDao);

//sc.setAttribute("memberService", memberService);
//sc.setAttribute("lectService", lectService);
//sc.setAttribute("managerService", managerService);
//sc.setAttribute("croomService", croomService);
